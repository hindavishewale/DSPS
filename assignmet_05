#include <iostream>
#include <string>
using namespace std;

#define STACK_SIZE 50 // Stack to hold operators and parentheses

// Global stack and top variable
char stack[STACK_SIZE];
int top = -1;

// Function to push a character onto the stack
void push(char x) {
    if (top < STACK_SIZE - 1) {
        stack[++top] = x;
    } else {
        cout << "Stack Overflow" << endl;
    }
}

// Function to pop a character from the stack
char pop() {
    if (top >= 0) {
        return stack[top--];
    } else {
        cout << "Stack Underflow" << endl;
        return '\0'; // Return null character in case of underflow
    }
}

// Function to return the precedence of operators
int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    } else if (c == '^') {
        return 3;
    } else {
        return -1; // Non-operator characters
    }
}

// Function to convert an infix expression to a postfix expression
void infixToPostfix(const string &infix) {
    char c;
    int i = 0;

    cout << "The postfix expression is: ";
    while (i < infix.length()) {
        c = infix[i];

        // If the character is an operand, directly print it
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
            cout << c;
        } 
        // If the character is '(', push it onto the stack
        else if (c == '(') {
            push(c);
        } 
        // If the character is ')', pop and print until '(' is found
        else if (c == ')') {
            while (top != -1 && stack[top] != '(') {
                cout << pop();
            }
            if (top != -1) { // Remove the '(' from the stack
                pop();
            }
        } 
        // If the character is an operator
        else {
            while (top != -1 && precedence(stack[top]) >= precedence(c)) {
                cout << pop();
            }
            push(c);
        }
        i++;
    }

    // Pop and print all remaining operators in the stack
    while (top != -1) {
        cout << pop();
    }
    cout << endl;
}

int main() {
    string infix;
    cout << "Enter the infix expression: ";
    cin >> infix;

    infixToPostfix(infix);

    return 0;
}
