#include <iostream>
using namespace std;
struct node
{
    string name;
    int roll_no;
    struct node *next;
};
struct node *temp,*head=0,*newnode;
void insert(string name,int roll_no)
{
    newnode=new node;
    newnode->name=name;
    newnode->roll_no=roll_no;
    newnode->next=0;
    if(head==0)
    {
        head=newnode;
        newnode->next=head;
    }
    else
    {
        temp=head;
        while(temp->next!=head)
        {
            temp=temp->next;
        }
        temp->next=newnode;
        newnode->next=head;
    }
}

void insert_node()
{
    string name;
    int roll_no;
    cout<<"enter name and roll_no of student:";
    cin>>name>>roll_no;
    insert(name,roll_no);
}

void remove_node()
{
    if (head == 0)
    {
        cout << "List is empty. Nothing to delete.\n";
        return;
    }

    int roll_no_delete;
    cout << "Enter roll_no to delete: ";
    cin >> roll_no_delete;

    temp = head;
    struct node *prev = nullptr;

    // If the head node is to be deleted
    if (head->roll_no == roll_no_delete)
    {
        if (head->next == head) // Only one node in the list
        {
            delete head;
            head = nullptr;
        }
        else
        {
            while (temp->next != head) // Traverse to the last node
            {
                temp = temp->next;
            }
            temp->next = head->next;
            delete head;
            head = temp->next;
        }
        cout << "Node deleted.\n";
        return;
    }

    // General case: Traverse the list to find the node
    do
    {
        prev = temp;
        temp = temp->next;
        if (temp->roll_no == roll_no_delete)
        {
            prev->next = temp->next;
            delete temp;
            cout << "Node deleted.\n";
            return;
        }
    } while (temp != head);

    cout << "Roll number not found.\n";
}

void display()
{
    if(head==0)
    {
        cout<<"empty!!";
    }
    else
    {
        temp=head;
        do
        {
        cout<<temp->name<<"\t"<<temp->roll_no<<endl;    
        temp=temp->next;   
        }while(temp!=head);
    }
}
void search()
{
    int roll_no_search,flag=0;
    cout<<"ennter roll_no_search:";
    cin>>roll_no_search;
    if(head==0)
    {
        cout<<"empty!!";
    }
    else
    {
        temp=head;
        do
        {
            if(roll_no_search==temp->roll_no)
            {
                cout<<"studnet found!!"<<endl;
                cout<<temp->name<<"\t"<<temp->roll_no<<endl;
                flag=1;
                break;
            }
              temp=temp->next;
        }while(temp!=head);
        if(flag!=1)
        {
            cout<<"not found";
        }
    }
    
}
int main()
{
    int ch,choice,i,n;
    string name;
    int roll_no;
   cout<<"enter n:";
   cin>>n;
   for(i=0;i<n;i++)
   {
       cout<<"enter name and roll_no of student"<<i+1<<endl;
       cin>>name>>roll_no;
       insert(name,roll_no);
   }
   do
   {
       cout<<"1.insert\n2.remove\n3.search\n4.display\n\n";
       cin>>ch;
       switch(ch)
       {
           case 1:insert_node();break;
           case 2:remove_node();break;
           case 3:search();break;
           case 4:display();break;
       }
    
    cout<<"1 to cont:";
    cin>>choice;
   }while(choice==1);

    return 0;
}
