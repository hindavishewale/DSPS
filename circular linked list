#include <iostream>
using namespace std;

struct node
{
    string name, roll_no;
    struct node *next;
};
struct node *temp, *head = 0, *newnode;

void insert(string name, string roll_no)
{
    newnode = new node;
    newnode->name = name;
    newnode->roll_no = roll_no;
    newnode->next = 0;

    if (head == 0)
    {
        head = newnode;
        newnode->next = head;
    }
    else
    {
        temp = head;
        while (temp->next != head)
        {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->next = head;
    }
}

void insert_new()
{
    string name, roll_no;
    cout << "Enter name: ";
    cin >> name;
    cout << "Enter roll_no: ";
    cin >> roll_no;
    insert(name, roll_no);
    cout << "Student added successfully!\n";
}

void display()
{
    if (head == 0)
    {
        cout << "List is empty.\n";
    }
    else
    {
        temp = head;
        do
        {
            cout << temp->name << "\t" << temp->roll_no << endl;
            temp = temp->next;
        } while (temp != head);
    }
}

void search()
{
    string roll_no_search;
    cout << "Enter roll_no to search: ";
    cin >> roll_no_search;

    if (head == 0)
    {
        cout << "List is empty. Nothing to search.\n";
    }
    else
    {
        temp = head;
        do
        {
            if (temp->roll_no == roll_no_search)
            {
                cout << "Roll_no found: " << temp->name << "\t" << temp->roll_no << endl;
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Roll_no not found.\n";
    }
}

void remove_node()
{
    if (head == 0)
    {
        cout << "List is empty. Nothing to delete.\n";
        return;
    }

    string roll_no_delete;
    cout << "Enter roll_no to delete: ";
    cin >> roll_no_delete;

    temp = head;
    struct node *previous = 0;

    // Special case: if the head node needs to be deleted
    if (head->roll_no == roll_no_delete)
    {
        if (head->next == head) // Only one node in the list
        {
            delete head;
            head = 0;
        }
        else
        {
            while (temp->next != head) // Traverse to the last node
            {
                temp = temp->next;
            }
            temp->next = head->next;
            delete head;
            head = temp->next;
        }
        cout << "Node deleted!\n";
        return;
    }

    // General case: traverse to find the node
    do
    {
        previous = temp;
        temp = temp->next;
        if (temp->roll_no == roll_no_delete)
        {
            previous->next = temp->next;
            delete temp;
            cout << "Node deleted!\n";
            return;
        }
    } while (temp != head);

    cout << "Roll_no not found.\n";
}

int main()
{
    int n, ch, choice;

    cout << "Enter the number of students: ";
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        string name, roll_no;
        cout << "Enter name of student " << i + 1 << ": ";
        cin >> name;
        cout << "Enter roll_no of student " << i + 1 << ": ";
        cin >> roll_no;
        insert(name, roll_no);
    }

    do
    {
        cout << "1. Display\n2. Search\n3. Remove\n4. Insert New\n";
        cin >> ch;
        switch (ch)
        {
        case 1:
            display();
            break;
        case 2:
            search();
            break;
        case 3:
            remove_node();
            break;
        case 4:
            insert_new();
            break;
        default:
            cout << "Invalid choice!\n";
        }
        cout << "Enter 1 to continue: ";
        cin >> choice;
    } while (choice == 1);

    return 0;
}
