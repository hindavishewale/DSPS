#include <iostream>
using namespace std;
struct node
{
  string name,isbn,id; 
  struct node *next;
};
struct node *temp,*head=0,*newnode;
void insert(string name,string id,string isbn)
{
    newnode=new node;
    newnode->name=name;
    newnode->id=id;
    newnode->isbn=isbn;
    if(head==0)
    {
        head=newnode;
        newnode->next=head;
    }
    else
    {
        temp=head;
        while(temp->next!=head)
        {
            temp=temp->next;
        }
        temp->next=newnode;
        newnode->next=head;
    }
}

void insert_node()
{
        string name,isbn,id;
        cout<<"enter book name:";
        cin>>name;
        cout<<"enter book id:";
        cin>>id;
        cout<<"enter book ISBN:";
        cin>>isbn;
        insert(name,id,isbn);
}

void display()
{
    if(head==0)
    {
        cout<<"empty!!!";
    }
    else
    {
        temp=head;
        do
        {
            cout<<temp->name<<"\t"<<temp->id<<"\t"<<temp->isbn<<endl;
            temp=temp->next;
        }while(temp!=head);
    }
}



void search_node()
{
    string name_search;
    cout<<"enter name_search:";
    cin>>name_search;
     if(head==0)
    {
        cout<<"empty!!!";
    }
    else
    {
        temp=head;
        do
        {
            if(temp->name==name_search)
            {
                cout<<"book found!!"<<endl;
                cout<<"details:"<<endl;
                cout<<temp->name<<"\t"<<temp->id<<"\t"<<temp->isbn<<endl;
                temp=temp->next;
                return;
            }
        }while(temp!=head);
        cout<<"book not found";
    }
}


void remove_node()
{
    string name_remove;
    cout << "Enter name to remove: ";
    cin >> name_remove;

    if (head == 0) 
    {
        cout << "List is empty!" << endl;
        return;
    }

    temp = head;
    struct node *previous = 0;

    
    if (head->name == name_remove) 
    {
        if (head->next == head) 
        {
            delete head;
            head = 0;
        }
        else 
        {
            while (temp->next != head) 
                temp = temp->next;
            temp->next = head->next;
            struct node *to_delete = head;
            head = head->next;
            delete to_delete;
        }
        cout << "Node deleted!" << endl;
        return;
    }

    do 
    {
        previous = temp;
        temp = temp->next;
        if (temp->name == name_remove) 
        {
            previous->next = temp->next;
            delete temp;
            cout << "Node deleted!" << endl;
            return;
        }
    } while (temp != head);

    cout << "Node not found!" << endl;
}


void update()
{
   
    string name_search;
    string upadte_name,update_id,update_isbn;
    cout<<"enter name_search:";
    cin>>name_search;
     if(head==0)
    {
        cout<<"empty!!!";
    }
    else
    {
        temp=head;
        do
        {
            if(temp->name==name_search)
            {
                cout<<"book found!!"<<endl;
                cout<<"details:"<<endl;
                cout<<temp->name<<"\t"<<temp->id<<"\t"<<temp->isbn<<endl;
                cout<<"enter new details:"<<endl;
                cout<<"enter book name:";
                cin>>upadte_name;
                cout<<"enter book id:";
                cin>>update_id;
                cout<<"enter book ISBN:";
                cin>>update_isbn;
                temp->name=upadte_name;
                temp->id=update_id;
                temp->isbn=update_isbn;
                temp=temp->next;
                return;
            }
        }while(temp!=head);
        cout<<"book not found";
    }
    
    
}


int main()
{
    int n,i,ch,choice;
    string name,isbn,id;
    cout<<"enter n :";
    cin>>n;
    for(i=0;i<n;i++)
    {
        cout<<"enter book name:";
        cin>>name;
        cout<<"enter book id:";
        cin>>id;
        cout<<"enter book ISBN:";
        cin>>isbn;
        insert(name,id,isbn);
        
    }
    do
    {
    cout<<"1.insert_node\n2.remove_node\n3.search_node\n4.update\n5.display";
    cin>>ch;
    switch(ch)
    {
        case 1:insert_node();break;
        case 2:remove_node();break;
        case 3:search_node();break;
        case 4:update();break;
        case 5:display();break;
    }
    cout<<"1 to continue:";
    cin>>choice;
    }while(choice==1);
    return 0;
}
