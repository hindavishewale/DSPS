#include <iostream>
using namespace std;

struct node {
    string name;
    string contact;
    int donationAmount;
    struct node *next;
};

int ch, choice;
struct node* head = nullptr, *newnode, *temp, *prev;

void insert() {
    newnode = new node;
    cout << "Enter donor's name: ";
    cin >> newnode->name;
    cout << "Enter donor's contact: ";
    cin >> newnode->contact;
    cout << "Enter donation amount: ";
    cin >> newnode->donationAmount;
    
    newnode->next = nullptr;

    if (head == nullptr) {
        head = newnode;  // If the list is empty, this node becomes the head.
        newnode->next = head;  // Make it circular.
    } else {
        temp = head;
        while (temp->next != head) {  // Traverse until the last node
            temp = temp->next;
        }
        temp->next = newnode;  // Make the last node point to the new node
        newnode->next = head;  // Make the new node point back to the head (circular)
    }
}

void display() {
    if (head == nullptr) {
        cout << "No donors in the list." << endl;
        return;
    }

    temp = head;
    do {
        cout << "Name: " << temp->name << "\tContact: " << temp->contact << "\tDonation Amount: " << temp->donationAmount << endl;
        temp = temp->next;
    } while (temp != head);  // Loop until we reach the head again
}

void deleted() {
    if (head == nullptr) {
        cout << "The list is empty. No donor to delete." << endl;
        return;
    }

    string name_delete;
    cout << "Enter donor's name to delete: ";
    cin >> name_delete;

    temp = head;
    prev = nullptr;

    // Special case: head is the node to be deleted
    if (temp != nullptr && temp->name == name_delete) {
        if (temp->next == head) {  // Only one node in the list
            delete temp;
            head = nullptr;  // List is empty now
        } else {
            prev = head;
            while (temp->next != head) {  // Traverse to find the node
                prev = temp;
                temp = temp->next;
            }
            prev->next = head;  // Skip the node to be deleted
            delete temp;
        }
        cout << "Donor deleted!" << endl;
        return;
    }

    // Traverse through the list to find the node
    do {
        prev = temp;
        temp = temp->next;
    } while (temp != head && temp->name != name_delete);

    if (temp == head) {
        cout << "Donor not found!" << endl;
    } else {
        prev->next = temp->next;  // Skip the node to be deleted
        delete temp;
        cout << "Donor deleted!" << endl;
    }
}

void update() {
    string name_update;
    cout << "Enter donor's name to update: ";
    cin >> name_update;

    temp = head;
    do {
        if (temp->name == name_update) {
            cout << "Enter new contact info: ";
            cin >> temp->contact;
            cout << "Enter new donation amount: ";
            cin >> temp->donationAmount;
            cout << "Donor information updated!" << endl;
            return;
        }
        temp = temp->next;
    } while (temp != head);

    cout << "Donor not found!" << endl;
}

void search() {
    string name_search;
    cout << "Enter donor's name to search: ";
    cin >> name_search;

    temp = head;
    do {
        if (temp->name == name_search) {
            cout << "Name: " << temp->name << "\tContact: " << temp->contact << "\tDonation Amount: " << temp->donationAmount << endl;
            return;
        }
        temp = temp->next;
    } while (temp != head);

    cout << "Donor not found!" << endl;
}

int main() {
    do {
        cout << "1. Add Donor\n2. Delete Donor\n3. Update Donor Info\n4. Search Donor\n5. Display All Donors\n";
        cout << "Enter choice: ";
        cin >> ch;
        switch (ch) {
            case 1: insert(); break;
            case 2: deleted(); break;
            case 3: update(); break;
            case 4: search(); break;
            case 5: display(); break;
            default: cout << "Invalid choice!" << endl; break;
        }

        cout << "Enter 1 to continue, any other number to exit: ";
        cin >> choice;

    } while (choice == 1);

    return 0;
}
